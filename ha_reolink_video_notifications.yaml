blueprint:
  name: Reolink Video Notifications
  description: >
    Send Reolink video notifications to an Android device.

    Documentation: https://github.com/mick-warehime/ha-reolink-gif-notification
  
  domain: automation
  input:
    notify_device:
      name: Devices to Notify
      description: These mobile devices will receive a notification when alerts are
        triggered.
      default: []
      selector:
        device:
          integration: mobile_app
          multiple: true

    trigger_entities:
      name: Trigger Sensors
      description: These Reolink sensors will be monitored to determine when to send
        an alert.
      selector:
        entity:
          multiple: true
          filter:
            - integration: reolink
              domain: binary_sensor

    retrigger_delay:
      name: Retrigger Delay
      description: Time to wait before triggering the same camera again.
      default:
        hours: 0
        minutes: 0
        seconds: 30
      selector:
        duration: null

    number_of_photos:
      name: Number of photos
      description: Number of photos to use to create video notification.
      default: 10
      selector:
        number:
          min: 1
          max: 20

    delay_between_photos:
      name: Delay between photos (milliseconds)
      description: Delay between subsequent photos used to create video.
      default: 500
      selector:
        number:
          min: 100
          max: 2000
          step: 100

mode: parallel
max: 100

variables:
  notify_device: notify_device
  trigger_entities: trigger_entities
  retrigger_delay: retrigger_delay
  number_of_photos: number_of_photos
  delay_between_photos: delay_between_photos

trigger:
  platform: state
  entity_id: trigger_entities
  from: off
  to: on

action:
  - variables:
      camera_entities: "{{ device_entities(device_id(trigger.entity_id)) |
        select('match', '^camera\\.') | list }}"
      camera_to_snapshot: >
        {{ (camera_entities | select('match', '.*_snapshots_fluent$') | first)
        or (camera_entities | select('match', '.*_snapshots_clear$') | first) or
        (camera_entities | select('match', '.*_fluent$') | first) or
        (camera_entities | select('match', '.*_fluent$') | first) or
        (camera_entities | first) }}
      image_file_base: reolink_rich_notifications/{{ camera_to_snapshot }}_{{
        trigger.to_state.last_updated | as_timestamp |
        timestamp_custom('%Y-%m-%d_%H:%M:%S') }}
      should_skip_notification: >
        {%
          set other_sensor_times =
            trigger_entities |
            select('ne', trigger.entity_id) |
            select('is_device_attr', 'id', device_id(trigger.entity_id)) |
            expand |
            map(attribute = 'last_updated') |
            list
            + [trigger.from_state.last_updated]
        %} {{ trigger.to_state.last_updated - other_sensor_times|max <
        timedelta(**retrigger_delay) }}
  
  - if:
      - condition: template
        value_template: "{{ should_skip_notification }}"
    then:
      - stop: Skipping notification for being too soon.
  
  - repeat:
      for_each: "{{ notify_device }}"
      sequence:
        - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}
          data:
            title: "{{ trigger.from_state.attributes.friendly_name }}"
            message: ""
            data:
              tag: "{{ trigger.to_state.context.id }}"
              ttl: 0
              priority: high
              url: app://com.mcu.reolink
              clickAction: app://com.mcu.reolink
  
  - repeat:
      count: "{{number_of_photos | int}}"
      sequence:
        - service: camera.snapshot
          data_template:
            entity_id: "{{ camera_to_snapshot }}"
            filename: /media/{{ image_file_base }}_{{ '%02d' | format(repeat.index | int) |
              string }}.jpg
        - delay:
            milliseconds: "{{delay_between_photos | int}}"
  
  - service: shell_command.create_mp4
    data_template:
      arguments: /media/{{ image_file_base }}_
  
  - repeat:
      for_each: "{{ notify_device }}"
      sequence:
        - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}
          data:
            title: "{{ trigger.from_state.attributes.friendly_name }}"
            message: ""
            data:
              tag: "{{ trigger.to_state.context.id }}"
              video: /media/local/{{ image_file_base }}_.mp4
              ttl: 0
              priority: high
              url: app://com.mcu.reolink
              clickAction: app://com.mcu.reolink
